"""
Django settings for kodekronicalweb project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import sys
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load KodeKronical configuration and display config file info (only once)
_config_displayed = getattr(sys.modules[__name__], '_config_displayed', False)

try:
    # Import KodeKronical config from the installed package
    from kode_kronical.config import get_config
    
    # Load KodeKronical configuration
    kodekronical_config = get_config()
    
    # Display configuration file information (only once, and not during tests)
    if not _config_displayed and not os.environ.get('KODEKRONICALWEB_TESTING'):
        print("\n" + "="*60)
        print("üîß KODEKRONICALWEB SERVER CONFIGURATION")
        print("="*60)
        
        # Show which config file was used
        config_files_checked = [
            Path.cwd() / "kode-kronical.yaml",
            Path.cwd() / ".kode-kronical.yaml",
            Path.home() / ".kode-kronical.yaml",
            Path.home() / ".config" / "kode-kronical" / "config.yaml"
        ]
        
        active_config_file = None
        for config_file in config_files_checked:
            if config_file.exists():
                active_config_file = config_file
                break
        
        if active_config_file:
            print(f"üìÑ Using config file: {active_config_file}")
        else:
            print("üìÑ Using default configuration (no config file found)")
        
        # Show key configuration values
        print(f"üîπ KodeKronical enabled: {kodekronical_config.is_enabled()}")
        print(f"üîπ Debug mode: {kodekronical_config.is_debug()}")
        print(f"üîπ Storage mode: {'Local' if kodekronical_config.is_local_only() else 'AWS DynamoDB'}")
        
        if kodekronical_config.is_local_only():
            print(f"üîπ Local data dir: {kodekronical_config.get('local.data_dir', './perf_data')}")
        else:
            aws_config = kodekronical_config.get_aws_config()
            print(f"üîπ AWS region: {aws_config.get('region', 'not set')}")
            print(f"üîπ DynamoDB table: {aws_config.get('table_name', 'not set')}")
        
        # Show dashboard configuration
        dashboard_config = kodekronical_config.get_dashboard_config()
        dashboard_host = dashboard_config.get('host', '127.0.0.1')
        dashboard_port = dashboard_config.get('port', 8000)
        print(f"üîπ Dashboard URL: http://{dashboard_host}:{dashboard_port}")
        
        print("="*60)
       
        
        # Mark that we've displayed the config
        sys.modules[__name__]._config_displayed = True
    
    # Store config for use in Django settings
    KODEKRONICALWEB_CONFIG = kodekronical_config
    
except Exception as e:
    print(f"\n‚ö†Ô∏è  Warning: Could not load KodeKronical configuration: {e}")
    print("üîπ Using default Django settings")
    KODEKRONICALWEB_CONFIG = None


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-8-*!p)ez*w2v-uic4chdd$86_6*1ni=f8g*e2efs=ot+561c*$'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'daphne',  # Add at the top for ASGI support
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'channels',
    'rest_framework',
    'kodekronicalweb.dashboard',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'kodekronicalweb.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'kodekronicalweb.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# AWS DynamoDB Configuration
# Use KodeKronical configuration if available, otherwise fall back to environment variables
if 'KODEKRONICALWEB_CONFIG' in locals() and KODEKRONICALWEB_CONFIG:
    aws_config = KODEKRONICALWEB_CONFIG.get_aws_config()
    AWS_DEFAULT_REGION = aws_config.get('region', 'us-east-1')
    DYNAMODB_TABLE_NAME = aws_config.get('table_name', 'kode-kronical-data')
else:
    # Fallback to environment variables
    AWS_DEFAULT_REGION = os.environ.get('AWS_DEFAULT_REGION', 'us-east-1')
    DYNAMODB_TABLE_NAME = 'kode-kronical-data'

AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')

# Cache configuration
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'kodekronicalweb-cache',
        'TIMEOUT': 86400,  # 24 hours default timeout
        'OPTIONS': {
            'MAX_ENTRIES': 1000,
        }
    }
}

# Django Channels configuration
ASGI_APPLICATION = 'kodekronicalweb.asgi.application'

# Channel layers configuration (using in-memory for development)
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer'
    }
}

# For production, use Redis:
# CHANNEL_LAYERS = {
#     'default': {
#         'BACKEND': 'channels_redis.core.RedisChannelLayer',
#         'CONFIG': {
#             "hosts": [('127.0.0.1', 6379)],
#         },
#     },
# }

# DynamoDB Streams configuration
DYNAMODB_STREAMS_QUEUE_URL = os.environ.get('DYNAMODB_STREAMS_QUEUE_URL')

# Django REST Framework
REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 50,
    'DEFAULT_FILTER_BACKENDS': ['django_filters.backends.DjangoFilterBackend'],
}

# Logging configuration
import sys

# Suppress verbose logging during tests
_is_testing = os.environ.get('KODEKRONICALWEB_TESTING') == '1'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'stream': sys.stdout,
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'WARNING' if _is_testing else 'INFO',
    },
    'loggers': {
        'django.request': {
            'handlers': ['console'],
            'level': 'ERROR' if _is_testing else 'INFO',
            'propagate': False,
        },
        'botocore': {
            'handlers': ['console'],
            'level': 'ERROR' if _is_testing else 'INFO',
            'propagate': False,
        },
        'boto3': {
            'handlers': ['console'],
            'level': 'ERROR' if _is_testing else 'INFO',
            'propagate': False,
        },
    },
}
